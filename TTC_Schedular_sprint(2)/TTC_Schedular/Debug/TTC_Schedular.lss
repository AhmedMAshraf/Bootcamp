
TTC_Schedular.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000004f0  00000584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  0080007c  0080007c  000005a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cda  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ce  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000741  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  000023f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000552  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000757  00000000  00000000  00002b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000032b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8a:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
/* O/p : nothing */
/* Return : void */
/* Function that Sets direction of DIO pin */
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if(PinDirection == 1)
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_SetPinDirection+0x6>
  96:	43 c0       	rjmp	.+134    	; 0x11e <DIO_SetPinDirection+0x8c>
	{
		if(PinNum >= 0 && PinNum<=7)
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	68 f4       	brcc	.+26     	; 0xb6 <DIO_SetPinDirection+0x24>
		{
			Set_Bit(DDRA,PinNum);
  9c:	4a b3       	in	r20, 0x1a	; 26
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	b9 01       	movw	r22, r18
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPinDirection+0x18>
  a6:	66 0f       	add	r22, r22
  a8:	77 1f       	adc	r23, r23
  aa:	8a 95       	dec	r24
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPinDirection+0x14>
  ae:	cb 01       	movw	r24, r22
  b0:	84 2b       	or	r24, r20
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
  b6:	98 ef       	ldi	r25, 0xF8	; 248
  b8:	98 0f       	add	r25, r24
  ba:	98 30       	cpi	r25, 0x08	; 8
  bc:	68 f4       	brcc	.+26     	; 0xd8 <DIO_SetPinDirection+0x46>
		{
			Set_Bit(DDRB,(PinNum-8));
  be:	47 b3       	in	r20, 0x17	; 23
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	b9 01       	movw	r22, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_SetPinDirection+0x3a>
  c8:	66 0f       	add	r22, r22
  ca:	77 1f       	adc	r23, r23
  cc:	9a 95       	dec	r25
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_SetPinDirection+0x36>
  d0:	cb 01       	movw	r24, r22
  d2:	84 2b       	or	r24, r20
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
  d8:	90 ef       	ldi	r25, 0xF0	; 240
  da:	98 0f       	add	r25, r24
  dc:	98 30       	cpi	r25, 0x08	; 8
  de:	68 f4       	brcc	.+26     	; 0xfa <DIO_SetPinDirection+0x68>
		{
			Set_Bit(DDRC,(PinNum-16));
  e0:	44 b3       	in	r20, 0x14	; 20
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_SetPinDirection+0x5c>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	9a 95       	dec	r25
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_SetPinDirection+0x58>
  f2:	cb 01       	movw	r24, r22
  f4:	84 2b       	or	r24, r20
  f6:	84 bb       	out	0x14, r24	; 20
  f8:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
  fa:	98 ee       	ldi	r25, 0xE8	; 232
  fc:	98 0f       	add	r25, r24
  fe:	98 30       	cpi	r25, 0x08	; 8
 100:	08 f0       	brcs	.+2      	; 0x104 <DIO_SetPinDirection+0x72>
 102:	54 c0       	rjmp	.+168    	; 0x1ac <DIO_SetPinDirection+0x11a>
		{
			Set_Bit(DDRD,(PinNum-24));
 104:	41 b3       	in	r20, 0x11	; 17
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	b9 01       	movw	r22, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDirection+0x80>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	9a 95       	dec	r25
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDirection+0x7c>
 116:	cb 01       	movw	r24, r22
 118:	84 2b       	or	r24, r20
 11a:	81 bb       	out	0x11, r24	; 17
 11c:	08 95       	ret
		}
		else;
	}
	else if(PinDirection == 0)
 11e:	61 11       	cpse	r22, r1
 120:	45 c0       	rjmp	.+138    	; 0x1ac <DIO_SetPinDirection+0x11a>
	{
		if(PinNum >= 0 && PinNum<=7)
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	70 f4       	brcc	.+28     	; 0x142 <DIO_SetPinDirection+0xb0>
		{
			Clear_Bit(DDRA,PinNum);
 126:	4a b3       	in	r20, 0x1a	; 26
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_SetPinDirection+0xa2>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_SetPinDirection+0x9e>
 138:	cb 01       	movw	r24, r22
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	8a bb       	out	0x1a, r24	; 26
 140:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
 142:	98 ef       	ldi	r25, 0xF8	; 248
 144:	98 0f       	add	r25, r24
 146:	98 30       	cpi	r25, 0x08	; 8
 148:	70 f4       	brcc	.+28     	; 0x166 <DIO_SetPinDirection+0xd4>
		{
			Clear_Bit(DDRB,(PinNum-8));
 14a:	47 b3       	in	r20, 0x17	; 23
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDirection+0xc6>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	9a 95       	dec	r25
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDirection+0xc2>
 15c:	cb 01       	movw	r24, r22
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	87 bb       	out	0x17, r24	; 23
 164:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
 166:	90 ef       	ldi	r25, 0xF0	; 240
 168:	98 0f       	add	r25, r24
 16a:	98 30       	cpi	r25, 0x08	; 8
 16c:	70 f4       	brcc	.+28     	; 0x18a <DIO_SetPinDirection+0xf8>
		{
			Clear_Bit(DDRC,(PinNum-16));
 16e:	44 b3       	in	r20, 0x14	; 20
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPinDirection+0xea>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	9a 95       	dec	r25
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPinDirection+0xe6>
 180:	cb 01       	movw	r24, r22
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	84 bb       	out	0x14, r24	; 20
 188:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
 18a:	98 ee       	ldi	r25, 0xE8	; 232
 18c:	98 0f       	add	r25, r24
 18e:	98 30       	cpi	r25, 0x08	; 8
 190:	68 f4       	brcc	.+26     	; 0x1ac <DIO_SetPinDirection+0x11a>
		{
			Clear_Bit(DDRD,(PinNum-24));
 192:	41 b3       	in	r20, 0x11	; 17
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDirection+0x10e>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	9a 95       	dec	r25
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDirection+0x10a>
 1a4:	cb 01       	movw	r24, r22
 1a6:	80 95       	com	r24
 1a8:	84 23       	and	r24, r20
 1aa:	81 bb       	out	0x11, r24	; 17
 1ac:	08 95       	ret

000001ae <main>:
 */ 
#include "Includes/Schedular.h"


int main(void)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	6c 97       	sbiw	r28, 0x1c	; 28
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
	/* Initialize Leds Pins directions */
	DIO_SetPinDirection(12,HIGH);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	8c e0       	ldi	r24, 0x0C	; 12
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(13,HIGH);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	8d e0       	ldi	r24, 0x0D	; 13
 1ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(14,HIGH);
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	8e e0       	ldi	r24, 0x0E	; 14
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(15,HIGH);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	8f e0       	ldi	r24, 0x0F	; 15
 1de:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	
	/* Initialize OS */
	SchedulerInit();
 1e2:	0e 94 4c 01 	call	0x298	; 0x298 <SchedulerInit>
	
	/* Initialize tasks i want to add */
	vtask Task0 = {BlinkLed0,2000,2000,4};
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	e0 e6       	ldi	r30, 0x60	; 96
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	de 01       	movw	r26, r28
 1ee:	11 96       	adiw	r26, 0x01	; 1
 1f0:	01 90       	ld	r0, Z+
 1f2:	0d 92       	st	X+, r0
 1f4:	8a 95       	dec	r24
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x42>
	vtask Task1 = {BlinkLed1,2500,2500,2};
 1f8:	87 e0       	ldi	r24, 0x07	; 7
 1fa:	e7 e6       	ldi	r30, 0x67	; 103
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	de 01       	movw	r26, r28
 200:	18 96       	adiw	r26, 0x08	; 8
 202:	01 90       	ld	r0, Z+
 204:	0d 92       	st	X+, r0
 206:	8a 95       	dec	r24
 208:	e1 f7       	brne	.-8      	; 0x202 <main+0x54>
	vtask Task2 = {Blinkled2,3000,3000,1};
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	ee e6       	ldi	r30, 0x6E	; 110
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	de 01       	movw	r26, r28
 212:	1f 96       	adiw	r26, 0x0f	; 15
 214:	01 90       	ld	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	8a 95       	dec	r24
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x66>
	vtask Task3 = {Blinkled3,3500,3500,3};
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	e5 e7       	ldi	r30, 0x75	; 117
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	de 01       	movw	r26, r28
 224:	56 96       	adiw	r26, 0x16	; 22
 226:	01 90       	ld	r0, Z+
 228:	0d 92       	st	X+, r0
 22a:	8a 95       	dec	r24
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x78>
		
	/* Add the tasks */
	if(scheduler_Add_Struct(Task0));
 22e:	29 81       	ldd	r18, Y+1	; 0x01
 230:	3a 81       	ldd	r19, Y+2	; 0x02
 232:	4b 81       	ldd	r20, Y+3	; 0x03
 234:	5c 81       	ldd	r21, Y+4	; 0x04
 236:	6d 81       	ldd	r22, Y+5	; 0x05
 238:	7e 81       	ldd	r23, Y+6	; 0x06
 23a:	8f 81       	ldd	r24, Y+7	; 0x07
 23c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <scheduler_Add_Struct>
	if(scheduler_Add_Struct(Task1));
 240:	28 85       	ldd	r18, Y+8	; 0x08
 242:	39 85       	ldd	r19, Y+9	; 0x09
 244:	4a 85       	ldd	r20, Y+10	; 0x0a
 246:	5b 85       	ldd	r21, Y+11	; 0x0b
 248:	6c 85       	ldd	r22, Y+12	; 0x0c
 24a:	7d 85       	ldd	r23, Y+13	; 0x0d
 24c:	8e 85       	ldd	r24, Y+14	; 0x0e
 24e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <scheduler_Add_Struct>
	if(scheduler_Add_Struct(Task2));
 252:	2f 85       	ldd	r18, Y+15	; 0x0f
 254:	38 89       	ldd	r19, Y+16	; 0x10
 256:	49 89       	ldd	r20, Y+17	; 0x11
 258:	5a 89       	ldd	r21, Y+18	; 0x12
 25a:	6b 89       	ldd	r22, Y+19	; 0x13
 25c:	7c 89       	ldd	r23, Y+20	; 0x14
 25e:	8d 89       	ldd	r24, Y+21	; 0x15
 260:	0e 94 72 01 	call	0x2e4	; 0x2e4 <scheduler_Add_Struct>
	if(scheduler_Add_Struct(Task3));
 264:	2e 89       	ldd	r18, Y+22	; 0x16
 266:	3f 89       	ldd	r19, Y+23	; 0x17
 268:	48 8d       	ldd	r20, Y+24	; 0x18
 26a:	59 8d       	ldd	r21, Y+25	; 0x19
 26c:	6a 8d       	ldd	r22, Y+26	; 0x1a
 26e:	7b 8d       	ldd	r23, Y+27	; 0x1b
 270:	8c 8d       	ldd	r24, Y+28	; 0x1c
 272:	0e 94 72 01 	call	0x2e4	; 0x2e4 <scheduler_Add_Struct>
	
	/* Call SchedulerInit_AndStart to init timer tics to 1 ms */
	SchedulerStart();   
 276:	0e 94 0d 02 	call	0x41a	; 0x41a <SchedulerStart>
}
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	6c 96       	adiw	r28, 0x1c	; 28
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <Set_Flag>:
/* Return : void                                  */
/* Function that Set The global tick flag         */
/**************************************************/
void Set_Flag(void)
{
	Flag = FLAG_SET;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Flag>
 296:	08 95       	ret

00000298 <SchedulerInit>:
/* Return : void                                  */
/* Function that initalize Scheduler              */
/**************************************************/
void SchedulerInit (void)
{
	Set_Call_Back(Set_Flag);
 298:	88 e4       	ldi	r24, 0x48	; 72
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 4a 02 	call	0x494	; 0x494 <Set_Call_Back>
 2a0:	08 95       	ret

000002a2 <Pre_filled>:
/* O/p : N/A                                                       */
/* Return : void                                                   */
/* Function that Set The call back function to the next task       */
/*******************************************************************/
void Pre_filled(vtask ptr[] , uint8 Array_Size)
{
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
	/* Loop the whole tasks array */
	uint8 i = 0 ;
	for(i ; i<Array_Size ; i++)
 2aa:	66 23       	and	r22, r22
 2ac:	b1 f0       	breq	.+44     	; 0x2da <Pre_filled+0x38>
 2ae:	06 2f       	mov	r16, r22
 2b0:	c8 2f       	mov	r28, r24
 2b2:	d9 2f       	mov	r29, r25
 2b4:	10 e0       	ldi	r17, 0x00	; 0
	{
		/* Check if the task RTP has passed if not dec. by 1 */
		ptr[i].RunTimeProcessing -- ;
 2b6:	8c 81       	ldd	r24, Y+4	; 0x04
 2b8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	9d 83       	std	Y+5, r25	; 0x05
 2be:	8c 83       	std	Y+4, r24	; 0x04
		if(ptr[i].RunTimeProcessing == 0)
 2c0:	89 2b       	or	r24, r25
 2c2:	39 f4       	brne	.+14     	; 0x2d2 <Pre_filled+0x30>
		{
			/* Call the task func. */
			ptr[i].TaskPtr();
 2c4:	e8 81       	ld	r30, Y
 2c6:	f9 81       	ldd	r31, Y+1	; 0x01
 2c8:	09 95       	icall
			ptr[i].RunTimeProcessing = ptr[i].TaskPeriodicity;	
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	9b 81       	ldd	r25, Y+3	; 0x03
 2ce:	9d 83       	std	Y+5, r25	; 0x05
 2d0:	8c 83       	std	Y+4, r24	; 0x04
/*******************************************************************/
void Pre_filled(vtask ptr[] , uint8 Array_Size)
{
	/* Loop the whole tasks array */
	uint8 i = 0 ;
	for(i ; i<Array_Size ; i++)
 2d2:	1f 5f       	subi	r17, 0xFF	; 255
 2d4:	27 96       	adiw	r28, 0x07	; 7
 2d6:	01 13       	cpse	r16, r17
 2d8:	ee cf       	rjmp	.-36     	; 0x2b6 <Pre_filled+0x14>
			/* Call the task func. */
			ptr[i].TaskPtr();
			ptr[i].RunTimeProcessing = ptr[i].TaskPeriodicity;	
		}
	}
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <scheduler_Add_Struct>:
/* O/p : 1 if added succefully 0 if not                                                      */
/* Return : uint8                                                  */
/* Function that add a new task to the list                        */
/*******************************************************************/
uint8 scheduler_Add_Struct(vtask StructToAdd)
{
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	27 97       	sbiw	r28, 0x07	; 7
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	29 83       	std	Y+1, r18	; 0x01
 2fa:	3a 83       	std	Y+2, r19	; 0x02
 2fc:	4b 83       	std	Y+3, r20	; 0x03
 2fe:	5c 83       	std	Y+4, r21	; 0x04
 300:	6d 83       	std	Y+5, r22	; 0x05
 302:	7e 83       	std	Y+6, r23	; 0x06
 304:	8f 83       	std	Y+7, r24	; 0x07
	/* Check if the list is full */
	uint8 ReturnCondition = 0 ;
	if(No_Of_Elements < NUM_OF_TASKS)
 306:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 30a:	84 30       	cpi	r24, 0x04	; 4
 30c:	b0 f4       	brcc	.+44     	; 0x33a <scheduler_Add_Struct+0x56>
	{
		/* Add the passed struct the list and inc. the index */
		TaskArray[No_Of_Elements] = StructToAdd ;
 30e:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <__data_end>
 312:	87 e0       	ldi	r24, 0x07	; 7
 314:	a8 9f       	mul	r26, r24
 316:	d0 01       	movw	r26, r0
 318:	11 24       	eor	r1, r1
 31a:	a2 58       	subi	r26, 0x82	; 130
 31c:	bf 4f       	sbci	r27, 0xFF	; 255
 31e:	87 e0       	ldi	r24, 0x07	; 7
 320:	fe 01       	movw	r30, r28
 322:	31 96       	adiw	r30, 0x01	; 1
 324:	01 90       	ld	r0, Z+
 326:	0d 92       	st	X+, r0
 328:	8a 95       	dec	r24
 32a:	e1 f7       	brne	.-8      	; 0x324 <scheduler_Add_Struct+0x40>
		No_Of_Elements ++ ;
 32c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 330:	8f 5f       	subi	r24, 0xFF	; 255
 332:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		ReturnCondition = 1 ;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	01 c0       	rjmp	.+2      	; 0x33c <scheduler_Add_Struct+0x58>
	}
	else
		ReturnCondition = 0 ;
 33a:	80 e0       	ldi	r24, 0x00	; 0
	return ReturnCondition ;
}		
 33c:	27 96       	adiw	r28, 0x07	; 7
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <SchedularSortTasks>:
/* O/p : N/A                                                       */
/* Return : N/A                                                    */
/* Function that sort the tasks according to priority              */
/*******************************************************************/
void SchedularSortTasks(void)
{
 34e:	ff 92       	push	r15
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	27 97       	sbiw	r28, 0x07	; 7
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
	uint8 i , j  ;
	vtask TempStruct ;
	for (i=0; i < No_Of_Elements; ++i)
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	46 c0       	rjmp	.+140    	; 0x3f8 <SchedularSortTasks+0xaa>
	{
		for (j = i+1; j < No_Of_Elements; ++j)
 36c:	ff 24       	eor	r15, r15
 36e:	f3 94       	inc	r15
 370:	f4 0e       	add	r15, r20
 372:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 376:	f8 16       	cp	r15, r24
 378:	f0 f5       	brcc	.+124    	; 0x3f6 <SchedularSortTasks+0xa8>
 37a:	8f 2d       	mov	r24, r15
		{
			if (TaskArray[i].Priority > TaskArray[j].Priority)
 37c:	97 e0       	ldi	r25, 0x07	; 7
 37e:	49 9f       	mul	r20, r25
 380:	a0 01       	movw	r20, r0
 382:	11 24       	eor	r1, r1
 384:	42 58       	subi	r20, 0x82	; 130
 386:	5f 4f       	sbci	r21, 0xFF	; 255
 388:	ba 01       	movw	r22, r20
 38a:	6a 5f       	subi	r22, 0xFA	; 250
 38c:	7f 4f       	sbci	r23, 0xFF	; 255
 38e:	08 2f       	mov	r16, r24
 390:	10 e0       	ldi	r17, 0x00	; 0
 392:	a7 e0       	ldi	r26, 0x07	; 7
 394:	8a 9f       	mul	r24, r26
 396:	f0 01       	movw	r30, r0
 398:	11 24       	eor	r1, r1
 39a:	e2 58       	subi	r30, 0x82	; 130
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	db 01       	movw	r26, r22
 3a0:	2c 91       	ld	r18, X
 3a2:	96 81       	ldd	r25, Z+6	; 0x06
 3a4:	92 17       	cp	r25, r18
 3a6:	10 f5       	brcc	.+68     	; 0x3ec <SchedularSortTasks+0x9e>
			{				
				TempStruct =  TaskArray[i];
 3a8:	97 e0       	ldi	r25, 0x07	; 7
 3aa:	fa 01       	movw	r30, r20
 3ac:	de 01       	movw	r26, r28
 3ae:	11 96       	adiw	r26, 0x01	; 1
 3b0:	01 90       	ld	r0, Z+
 3b2:	0d 92       	st	X+, r0
 3b4:	9a 95       	dec	r25
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <SchedularSortTasks+0x62>
				TaskArray[i] = TaskArray[j];
 3b8:	98 01       	movw	r18, r16
 3ba:	22 0f       	add	r18, r18
 3bc:	33 1f       	adc	r19, r19
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	20 1b       	sub	r18, r16
 3c8:	31 0b       	sbc	r19, r17
 3ca:	22 58       	subi	r18, 0x82	; 130
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	97 e0       	ldi	r25, 0x07	; 7
 3d0:	f9 01       	movw	r30, r18
 3d2:	da 01       	movw	r26, r20
 3d4:	01 90       	ld	r0, Z+
 3d6:	0d 92       	st	X+, r0
 3d8:	9a 95       	dec	r25
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <SchedularSortTasks+0x86>
				TaskArray[j] = TempStruct;
 3dc:	97 e0       	ldi	r25, 0x07	; 7
 3de:	fe 01       	movw	r30, r28
 3e0:	31 96       	adiw	r30, 0x01	; 1
 3e2:	d9 01       	movw	r26, r18
 3e4:	01 90       	ld	r0, Z+
 3e6:	0d 92       	st	X+, r0
 3e8:	9a 95       	dec	r25
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <SchedularSortTasks+0x96>
{
	uint8 i , j  ;
	vtask TempStruct ;
	for (i=0; i < No_Of_Elements; ++i)
	{
		for (j = i+1; j < No_Of_Elements; ++j)
 3ec:	8f 5f       	subi	r24, 0xFF	; 255
 3ee:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__data_end>
 3f2:	89 17       	cp	r24, r25
 3f4:	60 f2       	brcs	.-104    	; 0x38e <SchedularSortTasks+0x40>
/*******************************************************************/
void SchedularSortTasks(void)
{
	uint8 i , j  ;
	vtask TempStruct ;
	for (i=0; i < No_Of_Elements; ++i)
 3f6:	4f 2d       	mov	r20, r15
 3f8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 3fc:	48 17       	cp	r20, r24
 3fe:	08 f4       	brcc	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	b5 cf       	rjmp	.-150    	; 0x36c <SchedularSortTasks+0x1e>
				TaskArray[i] = TaskArray[j];
				TaskArray[j] = TempStruct;
			}	
		}
	}
}
 402:	27 96       	adiw	r28, 0x07	; 7
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	08 95       	ret

0000041a <SchedulerStart>:
/* Function that Starts Scheduler                 */
/**************************************************/
void SchedulerStart(void)
{
	/*Sort Tasks*/
	SchedularSortTasks();
 41a:	0e 94 a7 01 	call	0x34e	; 0x34e <SchedularSortTasks>
	/* Init and start the timer */
	timer_init(OS_TICK_INTERVAL_MSEC);
 41e:	8c e7       	ldi	r24, 0x7C	; 124
 420:	0e 94 32 02 	call	0x464	; 0x464 <timer_init>
	
	/* For every interupt tick (1ms) call the pre_filled func */
	while(1)
	{
		if(Flag == FLAG_SET)
 424:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Flag>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	e1 f7       	brne	.-8      	; 0x424 <SchedulerStart+0xa>
		{
			Flag = 0 ;
 42c:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <Flag>
			Pre_filled(TaskArray,No_Of_Elements);
 430:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__data_end>
 434:	8e e7       	ldi	r24, 0x7E	; 126
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 51 01 	call	0x2a2	; 0x2a2 <Pre_filled>
 43c:	f3 cf       	rjmp	.-26     	; 0x424 <SchedulerStart+0xa>

0000043e <BlinkLed0>:
/* Return : void                                                   */
/* Function that set led0                                          */
/*******************************************************************/
void BlinkLed0 (void)
{
	Toggle_Bit(PORTB,LED0);
 43e:	98 b3       	in	r25, 0x18	; 24
 440:	80 e1       	ldi	r24, 0x10	; 16
 442:	89 27       	eor	r24, r25
 444:	88 bb       	out	0x18, r24	; 24
 446:	08 95       	ret

00000448 <BlinkLed1>:
/* Return : void                                                   */
/* Function that set led1                                          */
/*******************************************************************/
void BlinkLed1 (void)
{
	Toggle_Bit(PORTB,LED1);
 448:	98 b3       	in	r25, 0x18	; 24
 44a:	80 e2       	ldi	r24, 0x20	; 32
 44c:	89 27       	eor	r24, r25
 44e:	88 bb       	out	0x18, r24	; 24
 450:	08 95       	ret

00000452 <Blinkled2>:
/* Return : void                                                   */
/* Function that set led2                                          */
/*******************************************************************/
void Blinkled2 (void)
{
	Toggle_Bit(PORTB,LED2);
 452:	98 b3       	in	r25, 0x18	; 24
 454:	80 e4       	ldi	r24, 0x40	; 64
 456:	89 27       	eor	r24, r25
 458:	88 bb       	out	0x18, r24	; 24
 45a:	08 95       	ret

0000045c <Blinkled3>:
/* Return : void                                                   */
/* Function that set led3                                          */
/*******************************************************************/
void Blinkled3 (void)
{
	Toggle_Bit(PORTB,LED3);
 45c:	88 b3       	in	r24, 0x18	; 24
 45e:	80 58       	subi	r24, 0x80	; 128
 460:	88 bb       	out	0x18, r24	; 24
 462:	08 95       	ret

00000464 <timer_init>:
/* Function that initalize timer zero                              */
/*******************************************************************/
void timer_init(uint8 OCRVal)
{
	/* CTC Mode */
	Set_Bit(TCCR0,3);
 464:	93 b7       	in	r25, 0x33	; 51
 466:	98 60       	ori	r25, 0x08	; 8
 468:	93 bf       	out	0x33, r25	; 51
	Clear_Bit(TCCR0,6);
 46a:	93 b7       	in	r25, 0x33	; 51
 46c:	9f 7b       	andi	r25, 0xBF	; 191
 46e:	93 bf       	out	0x33, r25	; 51
	
	/* Set Timer 0 compare match interupt enable */
	Set_Bit(TIMSK,OCIE0);
 470:	99 b7       	in	r25, 0x39	; 57
 472:	92 60       	ori	r25, 0x02	; 2
 474:	99 bf       	out	0x39, r25	; 57
	
	/* Clear TCNT0 & set OCR0 to 124 (1M sec) */
	TCNT0 = ZERO ;
 476:	12 be       	out	0x32, r1	; 50
	OCR0 = OCRVal ;
 478:	8c bf       	out	0x3c, r24	; 60
	
	/* 64 Prescaler */
	Set_Bit(TCCR0,0);
 47a:	83 b7       	in	r24, 0x33	; 51
 47c:	81 60       	ori	r24, 0x01	; 1
 47e:	83 bf       	out	0x33, r24	; 51
	Set_Bit(TCCR0,1);
 480:	83 b7       	in	r24, 0x33	; 51
 482:	82 60       	ori	r24, 0x02	; 2
 484:	83 bf       	out	0x33, r24	; 51
	Clear_Bit(TCCR0,2);
 486:	83 b7       	in	r24, 0x33	; 51
 488:	8b 7f       	andi	r24, 0xFB	; 251
 48a:	83 bf       	out	0x33, r24	; 51
	
	/* Set global interupt register */
	Set_Bit(SREG,GIE);
 48c:	8f b7       	in	r24, 0x3f	; 63
 48e:	80 68       	ori	r24, 0x80	; 128
 490:	8f bf       	out	0x3f, r24	; 63
 492:	08 95       	ret

00000494 <Set_Call_Back>:
/* Return : void                                                                */
/* Function that assigns value of call back function to the global pointer      */
/********************************************************************************/
void Set_Call_Back(void (*GlobalPtr)(void))
{
	CallBack = GlobalPtr ;
 494:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <CallBack+0x1>
 498:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <CallBack>
 49c:	08 95       	ret

0000049e <__vector_10>:
/* I/p : N/A                                                                    */
/* O/p : N/A                                                                    */
/* Return : N/A                                                                 */
/********************************************************************************/
ISR(TIMER0_COMP_vect)
{
 49e:	1f 92       	push	r1
 4a0:	0f 92       	push	r0
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	2f 93       	push	r18
 4aa:	3f 93       	push	r19
 4ac:	4f 93       	push	r20
 4ae:	5f 93       	push	r21
 4b0:	6f 93       	push	r22
 4b2:	7f 93       	push	r23
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	af 93       	push	r26
 4ba:	bf 93       	push	r27
 4bc:	ef 93       	push	r30
 4be:	ff 93       	push	r31
	CallBack();
 4c0:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <CallBack>
 4c4:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <CallBack+0x1>
 4c8:	09 95       	icall
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <_exit>:
 4ec:	f8 94       	cli

000004ee <__stop_program>:
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <__stop_program>
