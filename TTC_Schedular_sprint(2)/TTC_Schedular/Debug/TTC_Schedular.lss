
TTC_Schedular.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000444  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800060  00800060  000004b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8e  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089a  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e4  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000068b  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002fc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 38       	cpi	r26, 0x80	; 128
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  74:	0c 94 20 02 	jmp	0x440	; 0x440 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDirection>:
/* O/p : nothing */
/* Return : void */
/* Function that Sets direction of DIO pin */
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if(PinDirection == 1)
  7c:	61 30       	cpi	r22, 0x01	; 1
  7e:	09 f0       	breq	.+2      	; 0x82 <DIO_SetPinDirection+0x6>
  80:	43 c0       	rjmp	.+134    	; 0x108 <DIO_SetPinDirection+0x8c>
	{
		if(PinNum >= 0 && PinNum<=7)
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	68 f4       	brcc	.+26     	; 0xa0 <DIO_SetPinDirection+0x24>
		{
			Set_Bit(DDRA,PinNum);
  86:	4a b3       	in	r20, 0x1a	; 26
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	b9 01       	movw	r22, r18
  8e:	02 c0       	rjmp	.+4      	; 0x94 <DIO_SetPinDirection+0x18>
  90:	66 0f       	add	r22, r22
  92:	77 1f       	adc	r23, r23
  94:	8a 95       	dec	r24
  96:	e2 f7       	brpl	.-8      	; 0x90 <DIO_SetPinDirection+0x14>
  98:	cb 01       	movw	r24, r22
  9a:	84 2b       	or	r24, r20
  9c:	8a bb       	out	0x1a, r24	; 26
  9e:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
  a0:	98 ef       	ldi	r25, 0xF8	; 248
  a2:	98 0f       	add	r25, r24
  a4:	98 30       	cpi	r25, 0x08	; 8
  a6:	68 f4       	brcc	.+26     	; 0xc2 <DIO_SetPinDirection+0x46>
		{
			Set_Bit(DDRB,(PinNum-8));
  a8:	47 b3       	in	r20, 0x17	; 23
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	b9 01       	movw	r22, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_SetPinDirection+0x3a>
  b2:	66 0f       	add	r22, r22
  b4:	77 1f       	adc	r23, r23
  b6:	9a 95       	dec	r25
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_SetPinDirection+0x36>
  ba:	cb 01       	movw	r24, r22
  bc:	84 2b       	or	r24, r20
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
  c2:	90 ef       	ldi	r25, 0xF0	; 240
  c4:	98 0f       	add	r25, r24
  c6:	98 30       	cpi	r25, 0x08	; 8
  c8:	68 f4       	brcc	.+26     	; 0xe4 <DIO_SetPinDirection+0x68>
		{
			Set_Bit(DDRC,(PinNum-16));
  ca:	44 b3       	in	r20, 0x14	; 20
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	b9 01       	movw	r22, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPinDirection+0x5c>
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	9a 95       	dec	r25
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SetPinDirection+0x58>
  dc:	cb 01       	movw	r24, r22
  de:	84 2b       	or	r24, r20
  e0:	84 bb       	out	0x14, r24	; 20
  e2:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
  e4:	98 ee       	ldi	r25, 0xE8	; 232
  e6:	98 0f       	add	r25, r24
  e8:	98 30       	cpi	r25, 0x08	; 8
  ea:	08 f0       	brcs	.+2      	; 0xee <DIO_SetPinDirection+0x72>
  ec:	54 c0       	rjmp	.+168    	; 0x196 <DIO_SetPinDirection+0x11a>
		{
			Set_Bit(DDRD,(PinNum-24));
  ee:	41 b3       	in	r20, 0x11	; 17
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	b9 01       	movw	r22, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_SetPinDirection+0x80>
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	9a 95       	dec	r25
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_SetPinDirection+0x7c>
 100:	cb 01       	movw	r24, r22
 102:	84 2b       	or	r24, r20
 104:	81 bb       	out	0x11, r24	; 17
 106:	08 95       	ret
		}
		else;
	}
	else if(PinDirection == 0)
 108:	61 11       	cpse	r22, r1
 10a:	45 c0       	rjmp	.+138    	; 0x196 <DIO_SetPinDirection+0x11a>
	{
		if(PinNum >= 0 && PinNum<=7)
 10c:	88 30       	cpi	r24, 0x08	; 8
 10e:	70 f4       	brcc	.+28     	; 0x12c <DIO_SetPinDirection+0xb0>
		{
			Clear_Bit(DDRA,PinNum);
 110:	4a b3       	in	r20, 0x1a	; 26
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	b9 01       	movw	r22, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SetPinDirection+0xa2>
 11a:	66 0f       	add	r22, r22
 11c:	77 1f       	adc	r23, r23
 11e:	8a 95       	dec	r24
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SetPinDirection+0x9e>
 122:	cb 01       	movw	r24, r22
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	8a bb       	out	0x1a, r24	; 26
 12a:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
 12c:	98 ef       	ldi	r25, 0xF8	; 248
 12e:	98 0f       	add	r25, r24
 130:	98 30       	cpi	r25, 0x08	; 8
 132:	70 f4       	brcc	.+28     	; 0x150 <DIO_SetPinDirection+0xd4>
		{
			Clear_Bit(DDRB,(PinNum-8));
 134:	47 b3       	in	r20, 0x17	; 23
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	b9 01       	movw	r22, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDirection+0xc6>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	9a 95       	dec	r25
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDirection+0xc2>
 146:	cb 01       	movw	r24, r22
 148:	80 95       	com	r24
 14a:	84 23       	and	r24, r20
 14c:	87 bb       	out	0x17, r24	; 23
 14e:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
 150:	90 ef       	ldi	r25, 0xF0	; 240
 152:	98 0f       	add	r25, r24
 154:	98 30       	cpi	r25, 0x08	; 8
 156:	70 f4       	brcc	.+28     	; 0x174 <DIO_SetPinDirection+0xf8>
		{
			Clear_Bit(DDRC,(PinNum-16));
 158:	44 b3       	in	r20, 0x14	; 20
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_SetPinDirection+0xea>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	9a 95       	dec	r25
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_SetPinDirection+0xe6>
 16a:	cb 01       	movw	r24, r22
 16c:	80 95       	com	r24
 16e:	84 23       	and	r24, r20
 170:	84 bb       	out	0x14, r24	; 20
 172:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
 174:	98 ee       	ldi	r25, 0xE8	; 232
 176:	98 0f       	add	r25, r24
 178:	98 30       	cpi	r25, 0x08	; 8
 17a:	68 f4       	brcc	.+26     	; 0x196 <DIO_SetPinDirection+0x11a>
		{
			Clear_Bit(DDRD,(PinNum-24));
 17c:	41 b3       	in	r20, 0x11	; 17
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinDirection+0x10e>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	9a 95       	dec	r25
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinDirection+0x10a>
 18e:	cb 01       	movw	r24, r22
 190:	80 95       	com	r24
 192:	84 23       	and	r24, r20
 194:	81 bb       	out	0x11, r24	; 17
 196:	08 95       	ret

00000198 <main>:
 */ 
#include "Includes/Schedular.h"


int main(void)
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	6c 97       	sbiw	r28, 0x1c	; 28
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
	/* Initialize Leds Pins directions */
	DIO_SetPinDirection(12,HIGH);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(13,HIGH);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
 1b8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(14,HIGH);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	8e e0       	ldi	r24, 0x0E	; 14
 1c0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(15,HIGH);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	
	/* Initialize OS */
	SchedulerInit();
 1cc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <SchedulerInit>
	
	/* Initialize tasks i want to add */
	vtask Task0 = {BlinkLed0,2000,2000};
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	fe 01       	movw	r30, r28
 1d4:	31 96       	adiw	r30, 0x01	; 1
 1d6:	df 01       	movw	r26, r30
 1d8:	98 2f       	mov	r25, r24
 1da:	1d 92       	st	X+, r1
 1dc:	9a 95       	dec	r25
 1de:	e9 f7       	brne	.-6      	; 0x1da <main+0x42>
 1e0:	29 ec       	ldi	r18, 0xC9	; 201
 1e2:	31 e0       	ldi	r19, 0x01	; 1
 1e4:	3a 83       	std	Y+2, r19	; 0x02
 1e6:	29 83       	std	Y+1, r18	; 0x01
 1e8:	20 ed       	ldi	r18, 0xD0	; 208
 1ea:	37 e0       	ldi	r19, 0x07	; 7
 1ec:	3c 83       	std	Y+4, r19	; 0x04
 1ee:	2b 83       	std	Y+3, r18	; 0x03
 1f0:	3e 83       	std	Y+6, r19	; 0x06
 1f2:	2d 83       	std	Y+5, r18	; 0x05
	vtask Task1 = {BlinkLed1,2500,2500};
 1f4:	37 96       	adiw	r30, 0x07	; 7
 1f6:	df 01       	movw	r26, r30
 1f8:	98 2f       	mov	r25, r24
 1fa:	1d 92       	st	X+, r1
 1fc:	9a 95       	dec	r25
 1fe:	e9 f7       	brne	.-6      	; 0x1fa <main+0x62>
 200:	2e ec       	ldi	r18, 0xCE	; 206
 202:	31 e0       	ldi	r19, 0x01	; 1
 204:	39 87       	std	Y+9, r19	; 0x09
 206:	28 87       	std	Y+8, r18	; 0x08
 208:	24 ec       	ldi	r18, 0xC4	; 196
 20a:	39 e0       	ldi	r19, 0x09	; 9
 20c:	3b 87       	std	Y+11, r19	; 0x0b
 20e:	2a 87       	std	Y+10, r18	; 0x0a
 210:	3d 87       	std	Y+13, r19	; 0x0d
 212:	2c 87       	std	Y+12, r18	; 0x0c
	vtask Task2 = {Blinkled2,3000,3000};
 214:	37 96       	adiw	r30, 0x07	; 7
 216:	df 01       	movw	r26, r30
 218:	98 2f       	mov	r25, r24
 21a:	1d 92       	st	X+, r1
 21c:	9a 95       	dec	r25
 21e:	e9 f7       	brne	.-6      	; 0x21a <main+0x82>
 220:	23 ed       	ldi	r18, 0xD3	; 211
 222:	31 e0       	ldi	r19, 0x01	; 1
 224:	38 8b       	std	Y+16, r19	; 0x10
 226:	2f 87       	std	Y+15, r18	; 0x0f
 228:	28 eb       	ldi	r18, 0xB8	; 184
 22a:	3b e0       	ldi	r19, 0x0B	; 11
 22c:	3a 8b       	std	Y+18, r19	; 0x12
 22e:	29 8b       	std	Y+17, r18	; 0x11
 230:	3c 8b       	std	Y+20, r19	; 0x14
 232:	2b 8b       	std	Y+19, r18	; 0x13
	vtask Task3 = {Blinkled3,3500,3500};
 234:	37 96       	adiw	r30, 0x07	; 7
 236:	df 01       	movw	r26, r30
 238:	1d 92       	st	X+, r1
 23a:	8a 95       	dec	r24
 23c:	e9 f7       	brne	.-6      	; 0x238 <main+0xa0>
 23e:	88 ed       	ldi	r24, 0xD8	; 216
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	9f 8b       	std	Y+23, r25	; 0x17
 244:	8e 8b       	std	Y+22, r24	; 0x16
 246:	8c ea       	ldi	r24, 0xAC	; 172
 248:	9d e0       	ldi	r25, 0x0D	; 13
 24a:	99 8f       	std	Y+25, r25	; 0x19
 24c:	88 8f       	std	Y+24, r24	; 0x18
 24e:	9b 8f       	std	Y+27, r25	; 0x1b
 250:	8a 8f       	std	Y+26, r24	; 0x1a
		
	/* Add the tasks */
	if(scheduler_Add_Struct(Task0));
 252:	29 81       	ldd	r18, Y+1	; 0x01
 254:	3a 81       	ldd	r19, Y+2	; 0x02
 256:	4b 81       	ldd	r20, Y+3	; 0x03
 258:	5c 81       	ldd	r21, Y+4	; 0x04
 25a:	6d 81       	ldd	r22, Y+5	; 0x05
 25c:	7e 81       	ldd	r23, Y+6	; 0x06
 25e:	8f 81       	ldd	r24, Y+7	; 0x07
 260:	0e 94 94 01 	call	0x328	; 0x328 <scheduler_Add_Struct>
	if(scheduler_Add_Struct(Task1));
 264:	28 85       	ldd	r18, Y+8	; 0x08
 266:	39 85       	ldd	r19, Y+9	; 0x09
 268:	4a 85       	ldd	r20, Y+10	; 0x0a
 26a:	5b 85       	ldd	r21, Y+11	; 0x0b
 26c:	6c 85       	ldd	r22, Y+12	; 0x0c
 26e:	7d 85       	ldd	r23, Y+13	; 0x0d
 270:	8e 85       	ldd	r24, Y+14	; 0x0e
 272:	0e 94 94 01 	call	0x328	; 0x328 <scheduler_Add_Struct>
	if(scheduler_Add_Struct(Task2));
 276:	2f 85       	ldd	r18, Y+15	; 0x0f
 278:	38 89       	ldd	r19, Y+16	; 0x10
 27a:	49 89       	ldd	r20, Y+17	; 0x11
 27c:	5a 89       	ldd	r21, Y+18	; 0x12
 27e:	6b 89       	ldd	r22, Y+19	; 0x13
 280:	7c 89       	ldd	r23, Y+20	; 0x14
 282:	8d 89       	ldd	r24, Y+21	; 0x15
 284:	0e 94 94 01 	call	0x328	; 0x328 <scheduler_Add_Struct>
	if(scheduler_Add_Struct(Task3));
 288:	2e 89       	ldd	r18, Y+22	; 0x16
 28a:	3f 89       	ldd	r19, Y+23	; 0x17
 28c:	48 8d       	ldd	r20, Y+24	; 0x18
 28e:	59 8d       	ldd	r21, Y+25	; 0x19
 290:	6a 8d       	ldd	r22, Y+26	; 0x1a
 292:	7b 8d       	ldd	r23, Y+27	; 0x1b
 294:	8c 8d       	ldd	r24, Y+28	; 0x1c
 296:	0e 94 94 01 	call	0x328	; 0x328 <scheduler_Add_Struct>
	
	/* Call SchedulerInit_AndStart to init timer tics to 1 ms */
	SchedulerStart();   
 29a:	0e 94 84 01 	call	0x308	; 0x308 <SchedulerStart>
}
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	6c 96       	adiw	r28, 0x1c	; 28
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <Set_Flag>:
/* Return : void                                  */
/* Function that Set The global tick flag         */
/**************************************************/
void Set_Flag(void)
{
	Flag = FLAG_SET;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Flag>
 2ba:	08 95       	ret

000002bc <SchedulerInit>:
/* Return : void                                  */
/* Function that initalize Scheduler              */
/**************************************************/
void SchedulerInit (void)
{
	Set_Call_Back(Set_Flag);
 2bc:	8a e5       	ldi	r24, 0x5A	; 90
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Set_Call_Back>
 2c4:	08 95       	ret

000002c6 <Pre_filled>:
/* O/p : N/A                                                       */
/* Return : void                                                   */
/* Function that Set The call back function to the next task       */
/*******************************************************************/
void Pre_filled(vtask ptr[] , uint8 Array_Size)
{
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
	/* Loop the whole tasks array */
	uint8 i = 0 ;
	for(i ; i<Array_Size ; i++)
 2ce:	66 23       	and	r22, r22
 2d0:	b1 f0       	breq	.+44     	; 0x2fe <Pre_filled+0x38>
 2d2:	06 2f       	mov	r16, r22
 2d4:	c8 2f       	mov	r28, r24
 2d6:	d9 2f       	mov	r29, r25
 2d8:	10 e0       	ldi	r17, 0x00	; 0
	{
		/* Check if the task RTP has passed if not dec. by 1 */
		ptr[i].RunTimeProcessing -- ;
 2da:	8c 81       	ldd	r24, Y+4	; 0x04
 2dc:	9d 81       	ldd	r25, Y+5	; 0x05
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	9d 83       	std	Y+5, r25	; 0x05
 2e2:	8c 83       	std	Y+4, r24	; 0x04
		if(ptr[i].RunTimeProcessing == 0)
 2e4:	89 2b       	or	r24, r25
 2e6:	39 f4       	brne	.+14     	; 0x2f6 <Pre_filled+0x30>
		{
			/* Call the task func. */
			ptr[i].TaskPtr();
 2e8:	e8 81       	ld	r30, Y
 2ea:	f9 81       	ldd	r31, Y+1	; 0x01
 2ec:	09 95       	icall
			ptr[i].RunTimeProcessing = ptr[i].TaskPeriodicity;	
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	9b 81       	ldd	r25, Y+3	; 0x03
 2f2:	9d 83       	std	Y+5, r25	; 0x05
 2f4:	8c 83       	std	Y+4, r24	; 0x04
/*******************************************************************/
void Pre_filled(vtask ptr[] , uint8 Array_Size)
{
	/* Loop the whole tasks array */
	uint8 i = 0 ;
	for(i ; i<Array_Size ; i++)
 2f6:	1f 5f       	subi	r17, 0xFF	; 255
 2f8:	27 96       	adiw	r28, 0x07	; 7
 2fa:	01 13       	cpse	r16, r17
 2fc:	ee cf       	rjmp	.-36     	; 0x2da <Pre_filled+0x14>
			/* Call the task func. */
			ptr[i].TaskPtr();
			ptr[i].RunTimeProcessing = ptr[i].TaskPeriodicity;	
		}
	}
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <SchedulerStart>:
/* Function that Starts Scheduler                 */
/**************************************************/
void SchedulerStart(void)
{
	/* Init and start the timer */
	timer_init(OS_TICK_INTERVAL_MSEC);
 308:	8c e7       	ldi	r24, 0x7C	; 124
 30a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <timer_init>
	
	/* For every interupt tick (1ms) call the pre_filled func */
	while(1)
	{
		if(Flag == FLAG_SET)
 30e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Flag>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	e1 f7       	brne	.-8      	; 0x30e <SchedulerStart+0x6>
		{
			Flag = 0 ;
 316:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Flag>
			Pre_filled(TaskArray,No_Of_Elements);
 31a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <_edata>
 31e:	82 e6       	ldi	r24, 0x62	; 98
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Pre_filled>
 326:	f3 cf       	rjmp	.-26     	; 0x30e <SchedulerStart+0x6>

00000328 <scheduler_Add_Struct>:
/* O/p : N/A                                                       */
/* Return : uint8                                                  */
/* Function that add a new task to the list                        */
/*******************************************************************/
uint8 scheduler_Add_Struct(vtask StructToAdd)
{
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
 330:	27 97       	sbiw	r28, 0x07	; 7
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	29 83       	std	Y+1, r18	; 0x01
 33e:	3a 83       	std	Y+2, r19	; 0x02
 340:	4b 83       	std	Y+3, r20	; 0x03
 342:	5c 83       	std	Y+4, r21	; 0x04
 344:	6d 83       	std	Y+5, r22	; 0x05
 346:	7e 83       	std	Y+6, r23	; 0x06
 348:	8f 83       	std	Y+7, r24	; 0x07
	/* Check if the list is full */
	uint8 ReturnCondition = 0 ;
	if(No_Of_Elements < NUM_OF_TASKS)
 34a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 34e:	84 30       	cpi	r24, 0x04	; 4
 350:	b0 f4       	brcc	.+44     	; 0x37e <scheduler_Add_Struct+0x56>
	{
		/* Add the passed struct the list and inc. the index */
		TaskArray[No_Of_Elements] = StructToAdd ;
 352:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <_edata>
 356:	87 e0       	ldi	r24, 0x07	; 7
 358:	a8 9f       	mul	r26, r24
 35a:	d0 01       	movw	r26, r0
 35c:	11 24       	eor	r1, r1
 35e:	ae 59       	subi	r26, 0x9E	; 158
 360:	bf 4f       	sbci	r27, 0xFF	; 255
 362:	87 e0       	ldi	r24, 0x07	; 7
 364:	fe 01       	movw	r30, r28
 366:	31 96       	adiw	r30, 0x01	; 1
 368:	01 90       	ld	r0, Z+
 36a:	0d 92       	st	X+, r0
 36c:	8a 95       	dec	r24
 36e:	e1 f7       	brne	.-8      	; 0x368 <scheduler_Add_Struct+0x40>
		No_Of_Elements ++ ;
 370:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 374:	8f 5f       	subi	r24, 0xFF	; 255
 376:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		ReturnCondition =1 ;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	01 c0       	rjmp	.+2      	; 0x380 <scheduler_Add_Struct+0x58>
	}
	else
		ReturnCondition = 0 ;
 37e:	80 e0       	ldi	r24, 0x00	; 0
	return ReturnCondition ;
}		
 380:	27 96       	adiw	r28, 0x07	; 7
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	f8 94       	cli
 386:	de bf       	out	0x3e, r29	; 62
 388:	0f be       	out	0x3f, r0	; 63
 38a:	cd bf       	out	0x3d, r28	; 61
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <BlinkLed0>:
/* Return : void                                                   */
/* Function that set led0                                          */
/*******************************************************************/
void BlinkLed0 (void)
{
	Toggle_Bit(PORTB,LED0);
 392:	98 b3       	in	r25, 0x18	; 24
 394:	80 e1       	ldi	r24, 0x10	; 16
 396:	89 27       	eor	r24, r25
 398:	88 bb       	out	0x18, r24	; 24
 39a:	08 95       	ret

0000039c <BlinkLed1>:
/* Return : void                                                   */
/* Function that set led1                                          */
/*******************************************************************/
void BlinkLed1 (void)
{
	Toggle_Bit(PORTB,LED1);
 39c:	98 b3       	in	r25, 0x18	; 24
 39e:	80 e2       	ldi	r24, 0x20	; 32
 3a0:	89 27       	eor	r24, r25
 3a2:	88 bb       	out	0x18, r24	; 24
 3a4:	08 95       	ret

000003a6 <Blinkled2>:
/* Return : void                                                   */
/* Function that set led2                                          */
/*******************************************************************/
void Blinkled2 (void)
{
	Toggle_Bit(PORTB,LED2);
 3a6:	98 b3       	in	r25, 0x18	; 24
 3a8:	80 e4       	ldi	r24, 0x40	; 64
 3aa:	89 27       	eor	r24, r25
 3ac:	88 bb       	out	0x18, r24	; 24
 3ae:	08 95       	ret

000003b0 <Blinkled3>:
/* Return : void                                                   */
/* Function that set led3                                          */
/*******************************************************************/
void Blinkled3 (void)
{
	Toggle_Bit(PORTB,LED3);
 3b0:	88 b3       	in	r24, 0x18	; 24
 3b2:	80 58       	subi	r24, 0x80	; 128
 3b4:	88 bb       	out	0x18, r24	; 24
 3b6:	08 95       	ret

000003b8 <timer_init>:
/* Function that initalize timer zero                              */
/*******************************************************************/
void timer_init(uint8 OCRVal)
{
	/* CTC Mode */
	Set_Bit(TCCR0,3);
 3b8:	93 b7       	in	r25, 0x33	; 51
 3ba:	98 60       	ori	r25, 0x08	; 8
 3bc:	93 bf       	out	0x33, r25	; 51
	Clear_Bit(TCCR0,6);
 3be:	93 b7       	in	r25, 0x33	; 51
 3c0:	9f 7b       	andi	r25, 0xBF	; 191
 3c2:	93 bf       	out	0x33, r25	; 51
	
	/* Set Timer 0 compare match interupt enable */
	Set_Bit(TIMSK,OCIE0);
 3c4:	99 b7       	in	r25, 0x39	; 57
 3c6:	92 60       	ori	r25, 0x02	; 2
 3c8:	99 bf       	out	0x39, r25	; 57
	
	/* Clear TCNT0 & set OCR0 to 124 (1M sec) */
	TCNT0 = ZERO ;
 3ca:	12 be       	out	0x32, r1	; 50
	OCR0 = OCRVal ;
 3cc:	8c bf       	out	0x3c, r24	; 60
	
	/* 64 Prescaler */
	Set_Bit(TCCR0,0);
 3ce:	83 b7       	in	r24, 0x33	; 51
 3d0:	81 60       	ori	r24, 0x01	; 1
 3d2:	83 bf       	out	0x33, r24	; 51
	Set_Bit(TCCR0,1);
 3d4:	83 b7       	in	r24, 0x33	; 51
 3d6:	82 60       	ori	r24, 0x02	; 2
 3d8:	83 bf       	out	0x33, r24	; 51
	Clear_Bit(TCCR0,2);
 3da:	83 b7       	in	r24, 0x33	; 51
 3dc:	8b 7f       	andi	r24, 0xFB	; 251
 3de:	83 bf       	out	0x33, r24	; 51
	
	/* Set global interupt register */
	Set_Bit(SREG,GIE);
 3e0:	8f b7       	in	r24, 0x3f	; 63
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	8f bf       	out	0x3f, r24	; 63
 3e6:	08 95       	ret

000003e8 <Set_Call_Back>:
/* Return : void                                                                */
/* Function that assigns value of call back function to the global pointer      */
/********************************************************************************/
void Set_Call_Back(void (*GlobalPtr)(void))
{
	CallBack = GlobalPtr ;
 3e8:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <CallBack+0x1>
 3ec:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <CallBack>
 3f0:	08 95       	ret

000003f2 <__vector_10>:
/* I/p : N/A                                                                    */
/* O/p : N/A                                                                    */
/* Return : N/A                                                                 */
/********************************************************************************/
ISR(TIMER0_COMP_vect)
{
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
 3fc:	2f 93       	push	r18
 3fe:	3f 93       	push	r19
 400:	4f 93       	push	r20
 402:	5f 93       	push	r21
 404:	6f 93       	push	r22
 406:	7f 93       	push	r23
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	af 93       	push	r26
 40e:	bf 93       	push	r27
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31
	CallBack();
 414:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <CallBack>
 418:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <CallBack+0x1>
 41c:	09 95       	icall
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
