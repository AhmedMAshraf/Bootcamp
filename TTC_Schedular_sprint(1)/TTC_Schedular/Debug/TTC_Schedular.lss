
TTC_Schedular.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000366  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000366  000003fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800068  00800068  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b85  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000837  00000000  00000000  000010dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069e  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ec  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c6  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002c06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8a:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
/* O/p : nothing */
/* Return : void */
/* Function that Sets direction of DIO pin */
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if(PinDirection == 1)
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	09 f0       	breq	.+2      	; 0x98 <DIO_SetPinDirection+0x6>
  96:	43 c0       	rjmp	.+134    	; 0x11e <DIO_SetPinDirection+0x8c>
	{
		if(PinNum >= 0 && PinNum<=7)
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	68 f4       	brcc	.+26     	; 0xb6 <DIO_SetPinDirection+0x24>
		{
			Set_Bit(DDRA,PinNum);
  9c:	4a b3       	in	r20, 0x1a	; 26
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	b9 01       	movw	r22, r18
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPinDirection+0x18>
  a6:	66 0f       	add	r22, r22
  a8:	77 1f       	adc	r23, r23
  aa:	8a 95       	dec	r24
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPinDirection+0x14>
  ae:	cb 01       	movw	r24, r22
  b0:	84 2b       	or	r24, r20
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
  b6:	98 ef       	ldi	r25, 0xF8	; 248
  b8:	98 0f       	add	r25, r24
  ba:	98 30       	cpi	r25, 0x08	; 8
  bc:	68 f4       	brcc	.+26     	; 0xd8 <DIO_SetPinDirection+0x46>
		{
			Set_Bit(DDRB,(PinNum-8));
  be:	47 b3       	in	r20, 0x17	; 23
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	b9 01       	movw	r22, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_SetPinDirection+0x3a>
  c8:	66 0f       	add	r22, r22
  ca:	77 1f       	adc	r23, r23
  cc:	9a 95       	dec	r25
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_SetPinDirection+0x36>
  d0:	cb 01       	movw	r24, r22
  d2:	84 2b       	or	r24, r20
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
  d8:	90 ef       	ldi	r25, 0xF0	; 240
  da:	98 0f       	add	r25, r24
  dc:	98 30       	cpi	r25, 0x08	; 8
  de:	68 f4       	brcc	.+26     	; 0xfa <DIO_SetPinDirection+0x68>
		{
			Set_Bit(DDRC,(PinNum-16));
  e0:	44 b3       	in	r20, 0x14	; 20
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_SetPinDirection+0x5c>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	9a 95       	dec	r25
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_SetPinDirection+0x58>
  f2:	cb 01       	movw	r24, r22
  f4:	84 2b       	or	r24, r20
  f6:	84 bb       	out	0x14, r24	; 20
  f8:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
  fa:	98 ee       	ldi	r25, 0xE8	; 232
  fc:	98 0f       	add	r25, r24
  fe:	98 30       	cpi	r25, 0x08	; 8
 100:	08 f0       	brcs	.+2      	; 0x104 <DIO_SetPinDirection+0x72>
 102:	54 c0       	rjmp	.+168    	; 0x1ac <DIO_SetPinDirection+0x11a>
		{
			Set_Bit(DDRD,(PinNum-24));
 104:	41 b3       	in	r20, 0x11	; 17
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	b9 01       	movw	r22, r18
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDirection+0x80>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	9a 95       	dec	r25
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDirection+0x7c>
 116:	cb 01       	movw	r24, r22
 118:	84 2b       	or	r24, r20
 11a:	81 bb       	out	0x11, r24	; 17
 11c:	08 95       	ret
		}
		else;
	}
	else if(PinDirection == 0)
 11e:	61 11       	cpse	r22, r1
 120:	45 c0       	rjmp	.+138    	; 0x1ac <DIO_SetPinDirection+0x11a>
	{
		if(PinNum >= 0 && PinNum<=7)
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	70 f4       	brcc	.+28     	; 0x142 <DIO_SetPinDirection+0xb0>
		{
			Clear_Bit(DDRA,PinNum);
 126:	4a b3       	in	r20, 0x1a	; 26
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_SetPinDirection+0xa2>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_SetPinDirection+0x9e>
 138:	cb 01       	movw	r24, r22
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	8a bb       	out	0x1a, r24	; 26
 140:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
 142:	98 ef       	ldi	r25, 0xF8	; 248
 144:	98 0f       	add	r25, r24
 146:	98 30       	cpi	r25, 0x08	; 8
 148:	70 f4       	brcc	.+28     	; 0x166 <DIO_SetPinDirection+0xd4>
		{
			Clear_Bit(DDRB,(PinNum-8));
 14a:	47 b3       	in	r20, 0x17	; 23
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDirection+0xc6>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	9a 95       	dec	r25
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDirection+0xc2>
 15c:	cb 01       	movw	r24, r22
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	87 bb       	out	0x17, r24	; 23
 164:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
 166:	90 ef       	ldi	r25, 0xF0	; 240
 168:	98 0f       	add	r25, r24
 16a:	98 30       	cpi	r25, 0x08	; 8
 16c:	70 f4       	brcc	.+28     	; 0x18a <DIO_SetPinDirection+0xf8>
		{
			Clear_Bit(DDRC,(PinNum-16));
 16e:	44 b3       	in	r20, 0x14	; 20
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPinDirection+0xea>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	9a 95       	dec	r25
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPinDirection+0xe6>
 180:	cb 01       	movw	r24, r22
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	84 bb       	out	0x14, r24	; 20
 188:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
 18a:	98 ee       	ldi	r25, 0xE8	; 232
 18c:	98 0f       	add	r25, r24
 18e:	98 30       	cpi	r25, 0x08	; 8
 190:	68 f4       	brcc	.+26     	; 0x1ac <DIO_SetPinDirection+0x11a>
		{
			Clear_Bit(DDRD,(PinNum-24));
 192:	41 b3       	in	r20, 0x11	; 17
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDirection+0x10e>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	9a 95       	dec	r25
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDirection+0x10a>
 1a4:	cb 01       	movw	r24, r22
 1a6:	80 95       	com	r24
 1a8:	84 23       	and	r24, r20
 1aa:	81 bb       	out	0x11, r24	; 17
 1ac:	08 95       	ret

000001ae <main>:


int main(void)
{
	/* Initialize Leds Pins directions */
	DIO_SetPinDirection(12,HIGH);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(13,HIGH);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	8d e0       	ldi	r24, 0x0D	; 13
 1ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(14,HIGH);
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	8e e0       	ldi	r24, 0x0E	; 14
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(15,HIGH);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	8f e0       	ldi	r24, 0x0F	; 15
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	
	/* Initialize OS */
	SchedulerInit();
 1ce:	0e 94 07 01 	call	0x20e	; 0x20e <SchedulerInit_AndStart>
	
	/* Initialize tasks i want to add */
	vtask Task0 = {BlinkLed0,2000,2000};
	vtask Task1 = {BlinkLed1,2500,2500};
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 95       	ret

000001d8 <Set_Flag>:
/* Return : void                                                   */
/* Function that Set The global tick flag                          */
/*******************************************************************/
void Set_Flag(void)
{
	Flag = FLAG_SET;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 1de:	08 95       	ret

000001e0 <Pre_filled>:
/* O/p : N/A                                                       */
/* Return : void                                                   */
/* Function that Set The call back function to the next task       */
/*******************************************************************/
void Pre_filled(taskType ptr[] , uint8 Array_Size)
{
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
	/* Loop all the tasks and call them */
	uint8 i = 0 ;
	for(i ; i<Array_Size ; i++)
 1e8:	66 23       	and	r22, r22
 1ea:	61 f0       	breq	.+24     	; 0x204 <Pre_filled+0x24>
 1ec:	d6 2f       	mov	r29, r22
 1ee:	08 2f       	mov	r16, r24
 1f0:	19 2f       	mov	r17, r25
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		ptr[i]() ;
 1f4:	d8 01       	movw	r26, r16
 1f6:	ed 91       	ld	r30, X+
 1f8:	fd 91       	ld	r31, X+
 1fa:	8d 01       	movw	r16, r26
 1fc:	09 95       	icall
/*******************************************************************/
void Pre_filled(taskType ptr[] , uint8 Array_Size)
{
	/* Loop all the tasks and call them */
	uint8 i = 0 ;
	for(i ; i<Array_Size ; i++)
 1fe:	cf 5f       	subi	r28, 0xFF	; 255
 200:	dc 13       	cpse	r29, r28
 202:	f8 cf       	rjmp	.-16     	; 0x1f4 <Pre_filled+0x14>
	{
		ptr[i]() ;
	}
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <SchedulerInit_AndStart>:
/* Function that initalize Scheduler                               */
/*******************************************************************/
void SchedulerInit_AndStart(void)
{
	/* Init and start the timer */
	timer_init(OS_TICK_INTERVAL_MSEC);
 20e:	8c e7       	ldi	r24, 0x7C	; 124
 210:	0e 94 6d 01 	call	0x2da	; 0x2da <timer_init>
	
	/* Set the call back fun to Set_Flag */
	Set_Call_Back(Set_Flag);
 214:	8c ee       	ldi	r24, 0xEC	; 236
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 85 01 	call	0x30a	; 0x30a <Set_Call_Back>
	
	/* For every interrupt call the pre_filled */
	while(1)
	{
		if(Flag == FLAG_SET)
 21c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	e1 f7       	brne	.-8      	; 0x21c <SchedulerInit_AndStart+0xe>
		{
			Flag = 0 ;
 224:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
			Pre_filled(TaskArray,NUM_OF_TASKS);
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	80 e6       	ldi	r24, 0x60	; 96
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Pre_filled>
 232:	f4 cf       	rjmp	.-24     	; 0x21c <SchedulerInit_AndStart+0xe>

00000234 <BlinkLed0>:
/*******************************************************************/
void BlinkLed0 (void)
{
	/* Check if the periodcity of task has passed to call it*/
	static uint16 Gticks = 0 ;
	Gticks++;
 234:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Gticks.1609>
 238:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Gticks.1609+0x1>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Gticks.1609+0x1>
 242:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Gticks.1609>
	if(Gticks >= 2000)
 246:	80 3d       	cpi	r24, 0xD0	; 208
 248:	97 40       	sbci	r25, 0x07	; 7
 24a:	40 f0       	brcs	.+16     	; 0x25c <BlinkLed0+0x28>
	{
		Toggle_Bit(PORTB,4);
 24c:	98 b3       	in	r25, 0x18	; 24
 24e:	80 e1       	ldi	r24, 0x10	; 16
 250:	89 27       	eor	r24, r25
 252:	88 bb       	out	0x18, r24	; 24
		Gticks = 0;
 254:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Gticks.1609+0x1>
 258:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Gticks.1609>
 25c:	08 95       	ret

0000025e <BlinkLed1>:
/*******************************************************************/
void BlinkLed1 (void)
{
	/* Check if the periodcity of task has passed to call it*/
	static uint16 Gticks = 0 ;
	Gticks++;
 25e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Gticks.1613>
 262:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Gticks.1613+0x1>
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Gticks.1613+0x1>
 26c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Gticks.1613>
	if(Gticks >= 2500)
 270:	84 3c       	cpi	r24, 0xC4	; 196
 272:	99 40       	sbci	r25, 0x09	; 9
 274:	40 f0       	brcs	.+16     	; 0x286 <BlinkLed1+0x28>
	{
		Toggle_Bit(PORTB,5);
 276:	98 b3       	in	r25, 0x18	; 24
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	89 27       	eor	r24, r25
 27c:	88 bb       	out	0x18, r24	; 24
		Gticks = 0;
 27e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Gticks.1613+0x1>
 282:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Gticks.1613>
 286:	08 95       	ret

00000288 <Blinkled2>:
/*******************************************************************/
void Blinkled2 (void)
{
	/* Check if the periodcity of task has passed to call it*/
	static uint16 Gticks = 0 ;
	Gticks++;
 288:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Gticks.1617>
 28c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Gticks.1617+0x1>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <Gticks.1617+0x1>
 296:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Gticks.1617>
	if(Gticks >= 3000)
 29a:	88 3b       	cpi	r24, 0xB8	; 184
 29c:	9b 40       	sbci	r25, 0x0B	; 11
 29e:	40 f0       	brcs	.+16     	; 0x2b0 <Blinkled2+0x28>
	{
		Toggle_Bit(PORTB,6);
 2a0:	98 b3       	in	r25, 0x18	; 24
 2a2:	80 e4       	ldi	r24, 0x40	; 64
 2a4:	89 27       	eor	r24, r25
 2a6:	88 bb       	out	0x18, r24	; 24
		Gticks = 0 ;
 2a8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Gticks.1617+0x1>
 2ac:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Gticks.1617>
 2b0:	08 95       	ret

000002b2 <Blinkled3>:
/*******************************************************************/
void Blinkled3 (void)
{
	/* Check if the periodcity of task has passed to call it*/
	static uint16 Gticks = 0 ;
	Gticks++;
 2b2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Gticks.1621>
 2b6:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Gticks.1621+0x1>
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Gticks.1621+0x1>
 2c0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Gticks.1621>
	if(Gticks >= 3500)
 2c4:	8c 3a       	cpi	r24, 0xAC	; 172
 2c6:	9d 40       	sbci	r25, 0x0D	; 13
 2c8:	38 f0       	brcs	.+14     	; 0x2d8 <Blinkled3+0x26>
	{
		Toggle_Bit(PORTB,7);
 2ca:	88 b3       	in	r24, 0x18	; 24
 2cc:	80 58       	subi	r24, 0x80	; 128
 2ce:	88 bb       	out	0x18, r24	; 24
		Gticks = 0;
 2d0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Gticks.1621+0x1>
 2d4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Gticks.1621>
 2d8:	08 95       	ret

000002da <timer_init>:
/* Function that initalize timer zero                              */
/*******************************************************************/
void timer_init(uint8 OCRVal)
{
	/* CTC Mode */
	Set_Bit(TCCR0,3);
 2da:	93 b7       	in	r25, 0x33	; 51
 2dc:	98 60       	ori	r25, 0x08	; 8
 2de:	93 bf       	out	0x33, r25	; 51
	Clear_Bit(TCCR0,6);
 2e0:	93 b7       	in	r25, 0x33	; 51
 2e2:	9f 7b       	andi	r25, 0xBF	; 191
 2e4:	93 bf       	out	0x33, r25	; 51
	
	/* Set Timer 0 compare match interupt enable */
	Set_Bit(TIMSK,OCIE0);
 2e6:	99 b7       	in	r25, 0x39	; 57
 2e8:	92 60       	ori	r25, 0x02	; 2
 2ea:	99 bf       	out	0x39, r25	; 57
	
	/* Clear TCNT0 & set OCR0 to 124 (1M sec) */
	TCNT0 = ZERO ;
 2ec:	12 be       	out	0x32, r1	; 50
	OCR0 = OCRVal ;
 2ee:	8c bf       	out	0x3c, r24	; 60
	
	/* 64 Prescaler */
	Set_Bit(TCCR0,0);
 2f0:	83 b7       	in	r24, 0x33	; 51
 2f2:	81 60       	ori	r24, 0x01	; 1
 2f4:	83 bf       	out	0x33, r24	; 51
	Set_Bit(TCCR0,1);
 2f6:	83 b7       	in	r24, 0x33	; 51
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	83 bf       	out	0x33, r24	; 51
	Clear_Bit(TCCR0,2);
 2fc:	83 b7       	in	r24, 0x33	; 51
 2fe:	8b 7f       	andi	r24, 0xFB	; 251
 300:	83 bf       	out	0x33, r24	; 51
	
	/* Set global interupt register */
	Set_Bit(SREG,GIE);
 302:	8f b7       	in	r24, 0x3f	; 63
 304:	80 68       	ori	r24, 0x80	; 128
 306:	8f bf       	out	0x3f, r24	; 63
 308:	08 95       	ret

0000030a <Set_Call_Back>:
/* Function that assigns value of call back function to the global pointer*/
/**************************************************************************/

void Set_Call_Back(void (*GlobalPtr)(void))
{
	CallBack = GlobalPtr ;
 30a:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <CallBack+0x1>
 30e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <CallBack>
 312:	08 95       	ret

00000314 <__vector_10>:

/*Interupt service routine for timer0 overflow                     */

/*******************************************************************/
ISR(TIMER0_COMP_vect)
{
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
	CallBack();
 336:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <CallBack>
 33a:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <CallBack+0x1>
 33e:	09 95       	icall
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
