
PWM_Motor_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0e  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f7  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000591  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d3  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000488  00000000  00000000  000020cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002553  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  64:	0c 94 15 02 	jmp	0x42a	; 0x42a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_WritePin>:
	{
		Pin = Get_Bit(PIND,(PinNum-24));
	}
	else;
	return Pin ;
}
  6c:	61 30       	cpi	r22, 0x01	; 1
  6e:	09 f0       	breq	.+2      	; 0x72 <DIO_WritePin+0x6>
  70:	43 c0       	rjmp	.+134    	; 0xf8 <DIO_WritePin+0x8c>
  72:	88 30       	cpi	r24, 0x08	; 8
  74:	68 f4       	brcc	.+26     	; 0x90 <DIO_WritePin+0x24>
  76:	4b b3       	in	r20, 0x1b	; 27
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	b9 01       	movw	r22, r18
  7e:	02 c0       	rjmp	.+4      	; 0x84 <DIO_WritePin+0x18>
  80:	66 0f       	add	r22, r22
  82:	77 1f       	adc	r23, r23
  84:	8a 95       	dec	r24
  86:	e2 f7       	brpl	.-8      	; 0x80 <DIO_WritePin+0x14>
  88:	cb 01       	movw	r24, r22
  8a:	84 2b       	or	r24, r20
  8c:	8b bb       	out	0x1b, r24	; 27
  8e:	08 95       	ret
  90:	98 ef       	ldi	r25, 0xF8	; 248
  92:	98 0f       	add	r25, r24
  94:	98 30       	cpi	r25, 0x08	; 8
  96:	68 f4       	brcc	.+26     	; 0xb2 <DIO_WritePin+0x46>
  98:	48 b3       	in	r20, 0x18	; 24
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	b9 01       	movw	r22, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_WritePin+0x3a>
  a2:	66 0f       	add	r22, r22
  a4:	77 1f       	adc	r23, r23
  a6:	9a 95       	dec	r25
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_WritePin+0x36>
  aa:	cb 01       	movw	r24, r22
  ac:	84 2b       	or	r24, r20
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret
  b2:	90 ef       	ldi	r25, 0xF0	; 240
  b4:	98 0f       	add	r25, r24
  b6:	98 30       	cpi	r25, 0x08	; 8
  b8:	68 f4       	brcc	.+26     	; 0xd4 <DIO_WritePin+0x68>
  ba:	45 b3       	in	r20, 0x15	; 21
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	b9 01       	movw	r22, r18
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_WritePin+0x5c>
  c4:	66 0f       	add	r22, r22
  c6:	77 1f       	adc	r23, r23
  c8:	9a 95       	dec	r25
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_WritePin+0x58>
  cc:	cb 01       	movw	r24, r22
  ce:	84 2b       	or	r24, r20
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	08 95       	ret
  d4:	98 ee       	ldi	r25, 0xE8	; 232
  d6:	98 0f       	add	r25, r24
  d8:	98 30       	cpi	r25, 0x08	; 8
  da:	08 f0       	brcs	.+2      	; 0xde <DIO_WritePin+0x72>
  dc:	54 c0       	rjmp	.+168    	; 0x186 <DIO_WritePin+0x11a>
  de:	42 b3       	in	r20, 0x12	; 18
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	b9 01       	movw	r22, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_WritePin+0x80>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	9a 95       	dec	r25
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_WritePin+0x7c>
  f0:	cb 01       	movw	r24, r22
  f2:	84 2b       	or	r24, r20
  f4:	82 bb       	out	0x12, r24	; 18
  f6:	08 95       	ret
  f8:	61 11       	cpse	r22, r1
  fa:	45 c0       	rjmp	.+138    	; 0x186 <DIO_WritePin+0x11a>
  fc:	88 30       	cpi	r24, 0x08	; 8
  fe:	70 f4       	brcc	.+28     	; 0x11c <DIO_WritePin+0xb0>
 100:	4b b3       	in	r20, 0x1b	; 27
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_WritePin+0xa2>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	8a 95       	dec	r24
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_WritePin+0x9e>
 112:	cb 01       	movw	r24, r22
 114:	80 95       	com	r24
 116:	84 23       	and	r24, r20
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	08 95       	ret
 11c:	98 ef       	ldi	r25, 0xF8	; 248
 11e:	98 0f       	add	r25, r24
 120:	98 30       	cpi	r25, 0x08	; 8
 122:	70 f4       	brcc	.+28     	; 0x140 <DIO_WritePin+0xd4>
 124:	48 b3       	in	r20, 0x18	; 24
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_WritePin+0xc6>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	9a 95       	dec	r25
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_WritePin+0xc2>
 136:	cb 01       	movw	r24, r22
 138:	80 95       	com	r24
 13a:	84 23       	and	r24, r20
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	08 95       	ret
 140:	90 ef       	ldi	r25, 0xF0	; 240
 142:	98 0f       	add	r25, r24
 144:	98 30       	cpi	r25, 0x08	; 8
 146:	70 f4       	brcc	.+28     	; 0x164 <DIO_WritePin+0xf8>
 148:	45 b3       	in	r20, 0x15	; 21
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_WritePin+0xea>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	9a 95       	dec	r25
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_WritePin+0xe6>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	85 bb       	out	0x15, r24	; 21
 162:	08 95       	ret
 164:	98 ee       	ldi	r25, 0xE8	; 232
 166:	98 0f       	add	r25, r24
 168:	98 30       	cpi	r25, 0x08	; 8
 16a:	68 f4       	brcc	.+26     	; 0x186 <DIO_WritePin+0x11a>
 16c:	42 b3       	in	r20, 0x12	; 18
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	b9 01       	movw	r22, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_WritePin+0x10e>
 176:	66 0f       	add	r22, r22
 178:	77 1f       	adc	r23, r23
 17a:	9a 95       	dec	r25
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_WritePin+0x10a>
 17e:	cb 01       	movw	r24, r22
 180:	80 95       	com	r24
 182:	84 23       	and	r24, r20
 184:	82 bb       	out	0x12, r24	; 18
 186:	08 95       	ret

00000188 <DIO_SetPinDirection>:
/* O/p : nothing */
/* Return : void */
/* Function that Sets direction of DIO pin */
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if(PinDirection == 1)
 188:	61 30       	cpi	r22, 0x01	; 1
 18a:	09 f0       	breq	.+2      	; 0x18e <DIO_SetPinDirection+0x6>
 18c:	43 c0       	rjmp	.+134    	; 0x214 <DIO_SetPinDirection+0x8c>
	{
		if(PinNum >= 0 && PinNum<=7)
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	68 f4       	brcc	.+26     	; 0x1ac <DIO_SetPinDirection+0x24>
		{
			Set_Bit(DDRA,PinNum);
 192:	4a b3       	in	r20, 0x1a	; 26
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	b9 01       	movw	r22, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinDirection+0x18>
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinDirection+0x14>
 1a4:	cb 01       	movw	r24, r22
 1a6:	84 2b       	or	r24, r20
 1a8:	8a bb       	out	0x1a, r24	; 26
 1aa:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
 1ac:	98 ef       	ldi	r25, 0xF8	; 248
 1ae:	98 0f       	add	r25, r24
 1b0:	98 30       	cpi	r25, 0x08	; 8
 1b2:	68 f4       	brcc	.+26     	; 0x1ce <DIO_SetPinDirection+0x46>
		{
			Set_Bit(DDRB,(PinNum-8));
 1b4:	47 b3       	in	r20, 0x17	; 23
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinDirection+0x3a>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	9a 95       	dec	r25
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinDirection+0x36>
 1c6:	cb 01       	movw	r24, r22
 1c8:	84 2b       	or	r24, r20
 1ca:	87 bb       	out	0x17, r24	; 23
 1cc:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
 1ce:	90 ef       	ldi	r25, 0xF0	; 240
 1d0:	98 0f       	add	r25, r24
 1d2:	98 30       	cpi	r25, 0x08	; 8
 1d4:	68 f4       	brcc	.+26     	; 0x1f0 <DIO_SetPinDirection+0x68>
		{
			Set_Bit(DDRC,(PinNum-16));
 1d6:	44 b3       	in	r20, 0x14	; 20
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPinDirection+0x5c>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	9a 95       	dec	r25
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPinDirection+0x58>
 1e8:	cb 01       	movw	r24, r22
 1ea:	84 2b       	or	r24, r20
 1ec:	84 bb       	out	0x14, r24	; 20
 1ee:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
 1f0:	98 ee       	ldi	r25, 0xE8	; 232
 1f2:	98 0f       	add	r25, r24
 1f4:	98 30       	cpi	r25, 0x08	; 8
 1f6:	08 f0       	brcs	.+2      	; 0x1fa <DIO_SetPinDirection+0x72>
 1f8:	54 c0       	rjmp	.+168    	; 0x2a2 <DIO_SetPinDirection+0x11a>
		{
			Set_Bit(DDRD,(PinNum-24));
 1fa:	41 b3       	in	r20, 0x11	; 17
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SetPinDirection+0x80>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	9a 95       	dec	r25
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SetPinDirection+0x7c>
 20c:	cb 01       	movw	r24, r22
 20e:	84 2b       	or	r24, r20
 210:	81 bb       	out	0x11, r24	; 17
 212:	08 95       	ret
		}
		else;
	}
	else if(PinDirection == 0)
 214:	61 11       	cpse	r22, r1
 216:	45 c0       	rjmp	.+138    	; 0x2a2 <DIO_SetPinDirection+0x11a>
	{
		if(PinNum >= 0 && PinNum<=7)
 218:	88 30       	cpi	r24, 0x08	; 8
 21a:	70 f4       	brcc	.+28     	; 0x238 <DIO_SetPinDirection+0xb0>
		{
			Clear_Bit(DDRA,PinNum);
 21c:	4a b3       	in	r20, 0x1a	; 26
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	b9 01       	movw	r22, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_SetPinDirection+0xa2>
 226:	66 0f       	add	r22, r22
 228:	77 1f       	adc	r23, r23
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_SetPinDirection+0x9e>
 22e:	cb 01       	movw	r24, r22
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	8a bb       	out	0x1a, r24	; 26
 236:	08 95       	ret
		}
		else if(PinNum > 7 && PinNum <= 15)
 238:	98 ef       	ldi	r25, 0xF8	; 248
 23a:	98 0f       	add	r25, r24
 23c:	98 30       	cpi	r25, 0x08	; 8
 23e:	70 f4       	brcc	.+28     	; 0x25c <DIO_SetPinDirection+0xd4>
		{
			Clear_Bit(DDRB,(PinNum-8));
 240:	47 b3       	in	r20, 0x17	; 23
 242:	21 e0       	ldi	r18, 0x01	; 1
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	b9 01       	movw	r22, r18
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_SetPinDirection+0xc6>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	9a 95       	dec	r25
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_SetPinDirection+0xc2>
 252:	cb 01       	movw	r24, r22
 254:	80 95       	com	r24
 256:	84 23       	and	r24, r20
 258:	87 bb       	out	0x17, r24	; 23
 25a:	08 95       	ret
		}
		else if(PinNum > 15 && PinNum <= 23 )
 25c:	90 ef       	ldi	r25, 0xF0	; 240
 25e:	98 0f       	add	r25, r24
 260:	98 30       	cpi	r25, 0x08	; 8
 262:	70 f4       	brcc	.+28     	; 0x280 <DIO_SetPinDirection+0xf8>
		{
			Clear_Bit(DDRC,(PinNum-16));
 264:	44 b3       	in	r20, 0x14	; 20
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	b9 01       	movw	r22, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_SetPinDirection+0xea>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	9a 95       	dec	r25
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_SetPinDirection+0xe6>
 276:	cb 01       	movw	r24, r22
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	84 bb       	out	0x14, r24	; 20
 27e:	08 95       	ret
		}
		else if(PinNum > 23 && PinNum<= 31)
 280:	98 ee       	ldi	r25, 0xE8	; 232
 282:	98 0f       	add	r25, r24
 284:	98 30       	cpi	r25, 0x08	; 8
 286:	68 f4       	brcc	.+26     	; 0x2a2 <DIO_SetPinDirection+0x11a>
		{
			Clear_Bit(DDRD,(PinNum-24));
 288:	41 b3       	in	r20, 0x11	; 17
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	b9 01       	movw	r22, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_SetPinDirection+0x10e>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	9a 95       	dec	r25
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_SetPinDirection+0x10a>
 29a:	cb 01       	movw	r24, r22
 29c:	80 95       	com	r24
 29e:	84 23       	and	r24, r20
 2a0:	81 bb       	out	0x11, r24	; 17
 2a2:	08 95       	ret

000002a4 <main>:

int main(void)
{
    /* Replace with your application code */
	
	timer_init();
 2a4:	0e 94 c3 01 	call	0x386	; 0x386 <timer_init>
	Timer1_PWM_Init();
 2a8:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <Timer1_PWM_Init>
	uint8 duty = DUTY0 ;
    while (1) 
    {
		for(duty=0 ; duty<= DUTY100 ; duty+=10)
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
		{
			Timer1_PWM_Change_Duty(duty);
 2ae:	8c 2f       	mov	r24, r28
 2b0:	0e 94 b6 01 	call	0x36c	; 0x36c <Timer1_PWM_Change_Duty>
			timer_delay(ONE_SECOND);
 2b4:	68 ee       	ldi	r22, 0xE8	; 232
 2b6:	73 e0       	ldi	r23, 0x03	; 3
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <timer_delay>
	timer_init();
	Timer1_PWM_Init();
	uint8 duty = DUTY0 ;
    while (1) 
    {
		for(duty=0 ; duty<= DUTY100 ; duty+=10)
 2c0:	c6 5f       	subi	r28, 0xF6	; 246
 2c2:	ce 36       	cpi	r28, 0x6E	; 110
 2c4:	a1 f7       	brne	.-24     	; 0x2ae <main+0xa>
			Timer1_PWM_Change_Duty(duty);
			timer_delay(ONE_SECOND);
		}
		if(duty >= 100)
			duty = DUTY0 ;
		timer_delay(ONE_SECOND);
 2c6:	68 ee       	ldi	r22, 0xE8	; 232
 2c8:	73 e0       	ldi	r23, 0x03	; 3
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 d6 01 	call	0x3ac	; 0x3ac <timer_delay>
    }
 2d2:	ec cf       	rjmp	.-40     	; 0x2ac <main+0x8>

000002d4 <Timer1_PWM_Init>:
/* Function that initalize timer one to pwm operation */

void Timer1_PWM_Init(void)
{
	/* Initialize OC1A / OC1B pins as output */
	DIO_SetPinDirection(MOTOR2,HIGH);
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	8d e1       	ldi	r24, 0x1D	; 29
 2d8:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR1,HIGH);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	8c e1       	ldi	r24, 0x1C	; 28
 2e0:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR1_DIR1_PIN,HIGH);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	8a e1       	ldi	r24, 0x1A	; 26
 2e8:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR1_DIR2_PIN,HIGH);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	8b e1       	ldi	r24, 0x1B	; 27
 2f0:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR2_DIR1_PIN,HIGH);
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	8e e1       	ldi	r24, 0x1E	; 30
 2f8:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR2_DIR2_PIN,HIGH);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	8f e1       	ldi	r24, 0x1F	; 31
 300:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_SetPinDirection>
	
	/* Check Direction MACRO */
	#if (MOTOR1_DIR == FORWARD)
	DIO_WritePin(MOTOR1_DIR1_PIN,HIGH); //Motor1 dirA
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	8a e1       	ldi	r24, 0x1A	; 26
 308:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	DIO_WritePin(MOTOR1_DIR2_PIN,LOW); //Motor1 dirB
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	8b e1       	ldi	r24, 0x1B	; 27
 310:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	#elif (MOTOR1_DIR == STOP)
	DIO_WritePin(MOTOR1_DIR1_PIN,LOW); //Motor1 dirA
	DIO_WritePin(MOTOR1_DIR2_PIN,LOW); //Motor1 dirB
	#endif
	#if (MOTOR2_DIR == FORWARD)
	DIO_WritePin(MOTOR2_DIR1_PIN,HIGH); //Motor1 dirA
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	8e e1       	ldi	r24, 0x1E	; 30
 318:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	DIO_WritePin(MOTOR2_DIR2_PIN,LOW); //Motor1 dirB
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	8f e1       	ldi	r24, 0x1F	; 31
 320:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	DIO_WritePin(MOTOR2_DIR1_PIN,LOW); //Motor1 dirA
	DIO_WritePin(MOTOR2_DIR2_PIN,LOW); //Motor1 dirB
	#endif
	
	/* Clear TCNT1 */
	TCNT1H = ZERO ;
 324:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = ZERO ;
 326:	1c bc       	out	0x2c, r1	; 44
	
	/* Configure timer1 to operate on Fast-Pwm 10-bit Mode */
	Set_Bit(TCCR1A,WGM10);
 328:	8f b5       	in	r24, 0x2f	; 47
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	8f bd       	out	0x2f, r24	; 47
	Set_Bit(TCCR1A,WGM11);
 32e:	8f b5       	in	r24, 0x2f	; 47
 330:	82 60       	ori	r24, 0x02	; 2
 332:	8f bd       	out	0x2f, r24	; 47
	Set_Bit(TCCR1B,WGM12);
 334:	8e b5       	in	r24, 0x2e	; 46
 336:	88 60       	ori	r24, 0x08	; 8
 338:	8e bd       	out	0x2e, r24	; 46
	Clear_Bit(TCCR1B,WGM13);
 33a:	8e b5       	in	r24, 0x2e	; 46
 33c:	8f 7e       	andi	r24, 0xEF	; 239
 33e:	8e bd       	out	0x2e, r24	; 46
	
	/* Non-Inverted Mode */
	Clear_Bit(TCCR1A,COM1A0);
 340:	8f b5       	in	r24, 0x2f	; 47
 342:	8f 7b       	andi	r24, 0xBF	; 191
 344:	8f bd       	out	0x2f, r24	; 47
	Clear_Bit(TCCR1A,COM1B0);
 346:	8f b5       	in	r24, 0x2f	; 47
 348:	8f 7e       	andi	r24, 0xEF	; 239
 34a:	8f bd       	out	0x2f, r24	; 47
	Set_Bit(TCCR1A,COM1A1);
 34c:	8f b5       	in	r24, 0x2f	; 47
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	8f bd       	out	0x2f, r24	; 47
	Set_Bit(TCCR1A,COM1B1);
 352:	8f b5       	in	r24, 0x2f	; 47
 354:	80 62       	ori	r24, 0x20	; 32
 356:	8f bd       	out	0x2f, r24	; 47
	
	/* Set Prescaler 64*/
	Set_Bit(TCCR1B,CS10);
 358:	8e b5       	in	r24, 0x2e	; 46
 35a:	81 60       	ori	r24, 0x01	; 1
 35c:	8e bd       	out	0x2e, r24	; 46
	Set_Bit(TCCR1B,CS11);
 35e:	8e b5       	in	r24, 0x2e	; 46
 360:	82 60       	ori	r24, 0x02	; 2
 362:	8e bd       	out	0x2e, r24	; 46
	Clear_Bit(TCCR1B,CS12);
 364:	8e b5       	in	r24, 0x2e	; 46
 366:	8b 7f       	andi	r24, 0xFB	; 251
 368:	8e bd       	out	0x2e, r24	; 46
 36a:	08 95       	ret

0000036c <Timer1_PWM_Change_Duty>:
/* O/p : N/A */
/* Return : void */
/* Function that change timer duty cycle */
void Timer1_PWM_Change_Duty(uint8 duty)
{
	uint16 value = duty*TIMER1_MAX/100 ;
 36c:	98 2f       	mov	r25, r24
 36e:	99 0f       	add	r25, r25
 370:	99 0f       	add	r25, r25
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	64 e6       	ldi	r22, 0x64	; 100
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	0e 94 ed 01 	call	0x3da	; 0x3da <__divmodhi4>
	OCR1AH = value >> 8 ;
 37c:	7b bd       	out	0x2b, r23	; 43
	OCR1AL = value ;
 37e:	6a bd       	out	0x2a, r22	; 42
	OCR1BH = value >> 8 ;
 380:	79 bd       	out	0x29, r23	; 41
	OCR1BL = value ;
 382:	68 bd       	out	0x28, r22	; 40
 384:	08 95       	ret

00000386 <timer_init>:
 */ 
#include "../Includes/timer.h"
void timer_init()
{
	/* CTC Mode */
	Set_Bit(TCCR0,3);
 386:	83 b7       	in	r24, 0x33	; 51
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	83 bf       	out	0x33, r24	; 51
	Clear_Bit(TCCR0,6);
 38c:	83 b7       	in	r24, 0x33	; 51
 38e:	8f 7b       	andi	r24, 0xBF	; 191
 390:	83 bf       	out	0x33, r24	; 51
	
	
	
	/* Clear TCNT0 & OCR0 */
	TCNT0 = 0x00 ;
 392:	12 be       	out	0x32, r1	; 50
	OCR0 = 250 ;
 394:	8a ef       	ldi	r24, 0xFA	; 250
 396:	8c bf       	out	0x3c, r24	; 60
	
	/* 64 Prescaler */
	Set_Bit(TCCR0,0);
 398:	83 b7       	in	r24, 0x33	; 51
 39a:	81 60       	ori	r24, 0x01	; 1
 39c:	83 bf       	out	0x33, r24	; 51
	Set_Bit(TCCR0,1);
 39e:	83 b7       	in	r24, 0x33	; 51
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	83 bf       	out	0x33, r24	; 51
	Clear_Bit(TCCR0,2);
 3a4:	83 b7       	in	r24, 0x33	; 51
 3a6:	8b 7f       	andi	r24, 0xFB	; 251
 3a8:	83 bf       	out	0x33, r24	; 51
 3aa:	08 95       	ret

000003ac <timer_delay>:
}

void timer_delay(uint32 n)
{
 3ac:	ab 01       	movw	r20, r22
 3ae:	bc 01       	movw	r22, r24
	
	/* Reset Over Flow flag*/
	Set_Bit(TIFR,0);
 3b0:	88 b7       	in	r24, 0x38	; 56
 3b2:	81 60       	ori	r24, 0x01	; 1
 3b4:	88 bf       	out	0x38, r24	; 56
	/* Reset Timer count */
	TCNT0 = 0x00 ;
 3b6:	12 be       	out	0x32, r1	; 50
	
	/* Each OF = 1ms */
	for(n ; n>0 ; n--)
 3b8:	41 15       	cp	r20, r1
 3ba:	51 05       	cpc	r21, r1
 3bc:	61 05       	cpc	r22, r1
 3be:	71 05       	cpc	r23, r1
 3c0:	59 f0       	breq	.+22     	; 0x3d8 <timer_delay+0x2c>
	{
		while(!(TIFR&0x02));
 3c2:	08 b6       	in	r0, 0x38	; 56
 3c4:	01 fe       	sbrs	r0, 1
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <timer_delay+0x16>
		TIFR |= 0x02 ;
 3c8:	88 b7       	in	r24, 0x38	; 56
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	88 bf       	out	0x38, r24	; 56
	Set_Bit(TIFR,0);
	/* Reset Timer count */
	TCNT0 = 0x00 ;
	
	/* Each OF = 1ms */
	for(n ; n>0 ; n--)
 3ce:	41 50       	subi	r20, 0x01	; 1
 3d0:	51 09       	sbc	r21, r1
 3d2:	61 09       	sbc	r22, r1
 3d4:	71 09       	sbc	r23, r1
 3d6:	a9 f7       	brne	.-22     	; 0x3c2 <timer_delay+0x16>
 3d8:	08 95       	ret

000003da <__divmodhi4>:
 3da:	97 fb       	bst	r25, 7
 3dc:	07 2e       	mov	r0, r23
 3de:	16 f4       	brtc	.+4      	; 0x3e4 <__divmodhi4+0xa>
 3e0:	00 94       	com	r0
 3e2:	07 d0       	rcall	.+14     	; 0x3f2 <__divmodhi4_neg1>
 3e4:	77 fd       	sbrc	r23, 7
 3e6:	09 d0       	rcall	.+18     	; 0x3fa <__divmodhi4_neg2>
 3e8:	0e 94 01 02 	call	0x402	; 0x402 <__udivmodhi4>
 3ec:	07 fc       	sbrc	r0, 7
 3ee:	05 d0       	rcall	.+10     	; 0x3fa <__divmodhi4_neg2>
 3f0:	3e f4       	brtc	.+14     	; 0x400 <__divmodhi4_exit>

000003f2 <__divmodhi4_neg1>:
 3f2:	90 95       	com	r25
 3f4:	81 95       	neg	r24
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	08 95       	ret

000003fa <__divmodhi4_neg2>:
 3fa:	70 95       	com	r23
 3fc:	61 95       	neg	r22
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000400 <__divmodhi4_exit>:
 400:	08 95       	ret

00000402 <__udivmodhi4>:
 402:	aa 1b       	sub	r26, r26
 404:	bb 1b       	sub	r27, r27
 406:	51 e1       	ldi	r21, 0x11	; 17
 408:	07 c0       	rjmp	.+14     	; 0x418 <__udivmodhi4_ep>

0000040a <__udivmodhi4_loop>:
 40a:	aa 1f       	adc	r26, r26
 40c:	bb 1f       	adc	r27, r27
 40e:	a6 17       	cp	r26, r22
 410:	b7 07       	cpc	r27, r23
 412:	10 f0       	brcs	.+4      	; 0x418 <__udivmodhi4_ep>
 414:	a6 1b       	sub	r26, r22
 416:	b7 0b       	sbc	r27, r23

00000418 <__udivmodhi4_ep>:
 418:	88 1f       	adc	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	5a 95       	dec	r21
 41e:	a9 f7       	brne	.-22     	; 0x40a <__udivmodhi4_loop>
 420:	80 95       	com	r24
 422:	90 95       	com	r25
 424:	bc 01       	movw	r22, r24
 426:	cd 01       	movw	r24, r26
 428:	08 95       	ret

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
